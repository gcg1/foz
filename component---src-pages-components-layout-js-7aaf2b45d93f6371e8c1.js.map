{"version":3,"sources":["webpack:///./src/pages/components/layout.js"],"names":["Layout","props","useEffect","window","scrollTo","elementsToAnimate","document","getElementsByClassName","checkVisibleElements","i","length","el","percentVisible","rect","windowHeight","getBoundingClientRect","innerHeight","documentElement","clientHeight","Math","floor","top","height","bottom","classList","add","remove","addEventListener","event","className","dark","children"],"mappings":"4FAAA,oDAkDeA,UA9CA,SAAAC,GA2Cb,OA7BAC,qBAAU,WACRC,OAAOC,SAAS,EAAG,GAEnB,IAAIC,EAAoBC,SAASC,uBAAuB,WAClDC,EAAuB,WAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAkBK,OAAQD,KACiB,IAnBrBE,EAmBRN,EAAkBI,GAnBNG,EAmBU,EAlBtDC,SACFC,SADED,EAAOF,EAAGI,wBACZD,EAAeX,OAAOa,aAAeV,SAASW,gBAAgBC,eAG9DC,KAAKC,MACH,KAAQP,EAAKQ,KAAO,EAAI,EAAIR,EAAKQ,QAAUR,EAAKS,OAAS,GAAM,KAC7DV,GACJO,KAAKC,MAAM,KAAQP,EAAKU,OAAST,GAAgBD,EAAKS,OAAU,KAC9DV,IAWEP,EAAkBI,GAAGe,UAAUC,IAAI,cAEnCpB,EAAkBI,GAAGe,UAAUE,OAAO,cAtBV,IAAUf,EAAIC,EAC5CC,EACFC,GAwBFN,IACAL,OAAOwB,iBACL,UACA,SAAUC,GACRpB,OAEF,MAUG,yBAAKqB,UAAW5B,EAAM6B,MAAQ,aAAc7B,EAAM8B,Y","file":"component---src-pages-components-layout-js-7aaf2b45d93f6371e8c1.js","sourcesContent":["import React, { useEffect } from \"react\"\nimport \"../../style/main.scss\"\nimport \"typeface-dm-sans\"\n\nconst Layout = props => {\n  const isElementXPercentInViewport = function (el, percentVisible) {\n    let rect = el.getBoundingClientRect(),\n      windowHeight = window.innerHeight || document.documentElement.clientHeight\n\n    return !(\n      Math.floor(\n        100 - ((rect.top >= 0 ? 0 : rect.top) / +-(rect.height / 1)) * 100\n      ) < percentVisible ||\n      Math.floor(100 - ((rect.bottom - windowHeight) / rect.height) * 100) <\n        percentVisible\n    )\n  }\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n\n    var elementsToAnimate = document.getElementsByClassName(\"animate\")\n    const checkVisibleElements = () => {\n      for (var i = 0; i < elementsToAnimate.length; i++) {\n        if (isElementXPercentInViewport(elementsToAnimate[i], 5) === true) {\n          elementsToAnimate[i].classList.add(\"is-visible\")\n        } else {\n          elementsToAnimate[i].classList.remove(\"is-visible\")\n        }\n      }\n    }\n    checkVisibleElements()\n    window.addEventListener(\n      \"scroll\",\n      function (event) {\n        checkVisibleElements()\n      },\n      false\n    )\n  })\n\n  // const changeDarkMode = bool => {\n  //   darkMode !== bool && updateDarkMode(bool)\n  // }\n\n  // return <div className={`page-wrapper ${dark && \"dark-mode\"}`}>{children}</div>\n\n  return <div className={props.dark && \"dark-mode\"}>{props.children}</div>\n}\n\nexport default Layout\n"],"sourceRoot":""}